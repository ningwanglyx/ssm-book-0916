<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- SSM项目：spring/springmvc整合mybatis -->

    <!-- 一 配置整合mybatis过程 -->
    <!-- 1. 加载数据库配置文件 -->
    <context:property-placeholder location="classpath:druid.properties"/>

    <!-- 2. 配置数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--配置数据库连接池属性-->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
    </bean>

    <!-- 3. 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--配置Mybatis全局配置文件： mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
        <!--扫描pojo包，使用别名-->
        <property name="typeAliasesPackage" value="com.ke.pojo"/>
        <!--扫描sql配置文件：mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:mapper/**.xml"/>

    </bean>

    <!-- 4. 配置mapper接口扫描包，动态实现mapper接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--给出需要扫描的mapper接口包-->
        <property name="basePackage" value="com.ke.mapper"/>
    </bean>

    <!--二 service层配置声明式事务-->
    <!-- 1. service层开启注解扫描 -->
    <context:component-scan base-package="com.ke.service"/>

    <!-- 2. 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--  3. 开启aspectJ支持-->
    <aop:aspectj-autoproxy/>

    <!-- 4. 开启事务驱动 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 三 整合redis -->
    <!-- 1. 配置JedisPoolConfig对象-->
    <bean id = "poolConfig" class = "redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="50"/>
        <property name="maxTotal" value="100"/>
        <property name="maxWaitMillis" value="20000"/>
    </bean>

    <!-- 2. 配置Jedis连接工厂-->
    <bean id = "connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="localhost"/>
        <property name="port" value="6379"/>
        <!--<property name="password" value="password"></property>-->
        <property name="poolConfig" ref="poolConfig"/>
    </bean>

    <!-- 3. 配置values序列化器对象-->
    <bean id="jdkSerializationRedisSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>

    <!-- 4. 配置key序列化对象-->
    <bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <!-- 5. 配置RedisTemplate对象 -->
    <bean id = "redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="jdkSerializationRedisSerializer"/>
    </bean>

    <!-- 6. 配Spring关于Redis字符串的运行环境 -->
    <bean id = "redisTemplate2" class = "org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer" ref="stringRedisSerializer"/>
        <property name="valueSerializer" ref="stringRedisSerializer"/>
    </bean>

</beans>